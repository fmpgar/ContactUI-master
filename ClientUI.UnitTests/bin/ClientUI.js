// ClientUI.js
(function($){
Type.registerNamespace('ClientUI.Model');ClientUI.Model.Contact=function(){ClientUI.Model.Contact.initializeBase(this,['contact']);this._metaData['creditlimit']=SparkleXrm.Sdk.AttributeTypes.money;}
ClientUI.Model.Contact.prototype={contactid:null,parentcustomerid:null,creditlimit:null,firstname:null,lastname:null,preferredcontactmethodcode:null}
Type.registerNamespace('ClientUI');ResourceStrings=function(){}
Type.registerNamespace('ClientUI.ViewModel');ClientUI.ViewModel.ContactViewModel=function(){this.contacts=new SparkleXrm.GridEditor.EntityDataViewModel(15,ClientUI.Model.Contact,false);this.AllowAddNew=ko.observable(true);ClientUI.ViewModel.ContactViewModel.initializeBase(this);var $0=new ClientUI.ViewModel.ObservableContact();this.contacts=new SparkleXrm.GridEditor.EntityDataViewModel(15,ClientUI.Model.Contact,false);this.ContactEdit=ko.validatedObservable($0);this.ContactEdit().add_onSaveComplete(ss.Delegate.create(this,this.$1_4));this.ErrorMessage=ko.observable();this.contacts.onDataLoaded.subscribe(ss.Delegate.create(this,this.$1_1));ClientUI.ViewModel.ObservableContact.registerValidation(this.contacts.validationBinder);}
ClientUI.ViewModel.ContactViewModel.prototype={$1_0:10,ErrorMessage:null,ContactEdit:null,$1_1:function($p0,$p1){var $0=$p1;for(var $1=0;$1<$0.to+1;$1++){var $2=this.contacts.getItem($1);Xrm.Utility.alertDialog(String.format('First Name is {0}, Last Name is {1}, Credit limit is {2}',$2.firstname,$2.lastname,$2.creditlimit),function(){
});if($2==null){return;}$2.add_propertyChanged(ss.Delegate.create(this,this.$1_3));}},$1_2:function(){var $0='8E649152-D273-E811-A965-000D3AB6E3A0';if(window.parent.Xrm.Page.ui!=null){var $1=window.parent.Xrm.Page.data.entity.getId();if($1!=null){$0=$1.replaceAll('{','').replaceAll('}','');}}return $0;},$1_3:function($p0,$p1){var $0=$p0;Xrm.Utility.alertDialog(String.format('First Name is {0}, Last Name is {1}, Credit limit is {2}',$0.firstname,$0.lastname,$0.creditlimit),function(){
});SparkleXrm.Sdk.OrganizationServiceProxy.beginUpdate($0,ss.Delegate.create(this,function($p1_0){
try{SparkleXrm.Sdk.OrganizationServiceProxy.update($0);this.ErrorMessage('');}catch($1_0){this.ErrorMessage($1_0.message);}finally{}}));},$1_4:function($p0){if($p0==null){this.ErrorMessage(null);this.contacts.reset();this.contacts.refresh();}else{this.ErrorMessage($p0);}},search:function(){Xrm.Utility.alertDialog('Alert1',function(){
});this.contacts.set_fetchXml("<fetch version='1.0' output-format='xml-platform' mapping='logical'  returntotalrecordcount='true' no-lock='true' distinct='false' count='{0}' paging-cookie='{1}' page='{2}'>\n                                            <entity name='contact'>\n                                            <attribute name='firstname' />\n                                            <attribute name='lastname' />\n                                            <attribute name='preferredcontactmethodcode' />\n                                            <attribute name='creditlimit' />                                            \n                                            <attribute name='contactid' />\n                                            <order attribute='fullname' descending='false' />\n                                            <filter type='and'>\n                                                <condition attribute='parentcustomerid' operator='eq' value='"+this.$1_2()+"' />\n                                            </filter>                                            \n                                            {3}\n                                            </entity>\n                                        </fetch>");Xrm.Utility.alertDialog('Alert3',function(){
});},AddNewCommand:function(){this.ContactEdit().AddNewVisible(true);}}
ClientUI.ViewModel.ObservableContact=function(){this.AddNewVisible=ko.observable(false);this.contactid=ko.observable();this.parentcustomerid=ko.observable();this.creditlimit=ko.observable();this.firstname=ko.observable();this.lastname=ko.observable();this.preferredcontactmethodcode=ko.observable();ClientUI.ViewModel.ObservableContact.initializeBase(this);ClientUI.ViewModel.ObservableContact.registerValidation(new SparkleXrm.ObservableValidationBinder(this));}
ClientUI.ViewModel.ObservableContact.validateCreditLimit=function(rules,viewModel,dataContext){return rules.addRequiredMsg(ResourceStrings.RequiredMessage);}
ClientUI.ViewModel.ObservableContact.validateLastName=function(rules,viewModel,dataContext){return rules.addRequiredMsg(ResourceStrings.RequiredMessage);}
ClientUI.ViewModel.ObservableContact.validatePreferredContactMethodCode=function(rules,viewModel,dataContext){return rules.addRule('Preferred Contact Method is required',function($p1_0){
return ($p1_0!=null)&&($p1_0).value!=null;});}
ClientUI.ViewModel.ObservableContact.registerValidation=function(binder){binder.register('lastname',ClientUI.ViewModel.ObservableContact.validateLastName);binder.register('creditlimit',ClientUI.ViewModel.ObservableContact.validateCreditLimit);binder.register('preferredcontactmethodcode',ClientUI.ViewModel.ObservableContact.validatePreferredContactMethodCode);}
ClientUI.ViewModel.ObservableContact.prototype={add_onSaveComplete:function(value){this.$1_0=ss.Delegate.combine(this.$1_0,value);},remove_onSaveComplete:function(value){this.$1_0=ss.Delegate.remove(this.$1_0,value);},$1_0:null,CancelCommand:function(){this.AddNewVisible(false);},SaveCommand:function(){var $0=(this).isValid();if(!$0){(this).errors.showAllMessages(true);return;}this.isBusy(true);var $1=new ClientUI.Model.Contact();$1.parentcustomerid=this.parentcustomerid();$1.creditlimit=this.creditlimit();$1.firstname=this.firstname();$1.lastname=this.lastname();$1.preferredcontactmethodcode=this.preferredcontactmethodcode();SparkleXrm.Sdk.OrganizationServiceProxy.beginCreate($1,ss.Delegate.create(this,function($p1_0){
try{this.contactid(SparkleXrm.Sdk.OrganizationServiceProxy.endCreate($p1_0));this.$1_0(null);(this).errors.showAllMessages(false);}catch($1_0){this.$1_0($1_0.message);}finally{this.isBusy(false);this.AddNewVisible(false);}}));},OpenAssociatedSubGridCommand:function(){var $0=window.parent.Xrm.Page.ui.navigation.items.get('navConnections');$0.setFocus();},contactSearchCommand:function(account,callback){var $0=String.format("<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>\n                                          <entity name='contact'>\n                                            <attribute name='fullname' />\n                                            <attribute name='telephone1' />\n                                            <attribute name='contactid' />\n                                            <order attribute='fullname' descending='false' />\n                                            <filter type='and'>\n                                              <condition attribute='parentcustomerid' operator='eq' uiname='A. Datum' uitype='account' value='{0}' />\n                                            </filter>\n                                          </entity>\n                                        </fetch>",SparkleXrm.Sdk.Guid.empty);SparkleXrm.Sdk.OrganizationServiceProxy.beginRetrieveMultiple($0,function($p1_0){
var $1_0=SparkleXrm.Sdk.OrganizationServiceProxy.endRetrieveMultiple($p1_0,SparkleXrm.Sdk.Entity);callback($1_0);});}}
Type.registerNamespace('ClientUI.View');ClientUI.View.ContactView=function(){}
ClientUI.View.ContactView.Init=function(){ClientUI.View.ContactView.vm=new ClientUI.ViewModel.ContactViewModel();ClientUI.View.ContactView.currentUserSettings=SparkleXrm.Sdk.OrganizationServiceProxy.getUserSettings();var $0=SparkleXrm.GridEditor.GridDataViewBinder.parseLayout(String.format('{0}, firstname, 250, {1}, lastname, 250, {2}, creditlimit, 250, {3}, preferredcontactmethodcode, 250',ResourceStrings.FirstName,ResourceStrings.LastName,ResourceStrings.CreditLimit,ResourceStrings.PreferredContactType));var $1=new SparkleXrm.GridEditor.GridDataViewBinder();SparkleXrm.GridEditor.GridDataViewBinder.addEditIndicatorColumn($0);SparkleXrm.GridEditor.XrmTextEditor.bindColumn($0[0]);SparkleXrm.GridEditor.XrmTextEditor.bindColumn($0[1]);SparkleXrm.GridEditor.XrmMoneyEditor.bindColumn($0[2],-1000,1000);SparkleXrm.GridEditor.XrmOptionSetEditor.bindColumn($0[3],'contact','preferredcontactmethodcode',false);ClientUI.View.ContactView.contactsGrid=$1.dataBindXrmGrid(ClientUI.View.ContactView.vm.contacts,$0,'container','pager',true,false);$1.addCheckBoxSelectColumn=false;$1.bindClickHandler(ClientUI.View.ContactView.contactsGrid);SparkleXrm.ViewBase.registerViewModel(ClientUI.View.ContactView.vm);Xrm.Utility.alertDialog('Alert1',function(){
});$(window).resize(ClientUI.View.ContactView.$0);$(function(){
ClientUI.View.ContactView.vm.search();});}
ClientUI.View.ContactView.$0=function($p0){var $0=$(window).height();var $1=$(window).width();$('#container').height($0-64).width($1-1);ClientUI.View.ContactView.contactsGrid.resizeCanvas();}
ClientUI.Model.Contact.registerClass('ClientUI.Model.Contact',SparkleXrm.Sdk.Entity);ResourceStrings.registerClass('ResourceStrings');ClientUI.ViewModel.ContactViewModel.registerClass('ClientUI.ViewModel.ContactViewModel',SparkleXrm.ViewModelBase);ClientUI.ViewModel.ObservableContact.registerClass('ClientUI.ViewModel.ObservableContact',SparkleXrm.ViewModelBase);ClientUI.View.ContactView.registerClass('ClientUI.View.ContactView');ResourceStrings.RequiredMessage='Required';ResourceStrings.SaveButton='Save';ResourceStrings.CancelButton='Cancel';ResourceStrings.Contacts='Contacts';ResourceStrings.FirstName='First Name';ResourceStrings.LastName='Last Name';ResourceStrings.CreditLimit='Credit Limit';ResourceStrings.PreferredContactType='Preferred Contact Method';ClientUI.View.ContactView.vm=null;ClientUI.View.ContactView.contactsGrid=null;ClientUI.View.ContactView.currentUserSettings=null;})(window.xrmjQuery);